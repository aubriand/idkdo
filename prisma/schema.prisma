// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  // relations for app models
  memberships   Membership[]
  ownedGroups   Group[]    @relation("GroupOwner")
  createdIdeas  Idea[]    @relation("UserCreatedIdeas")
  claims        Claim[]
  suggestions   Suggestion[]
  giftList      GiftList?
  createdInvitations Invitation[] @relation("InvitationCreatedBy")
  usedInvitations     Invitation[] @relation("InvitationUsedBy")
  pushSubscriptions   PushSubscription[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Application models: groups, lists and ideas (gift suggestions)
model Group {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // owner is a user who created the group
  ownerId   String
  owner     User      @relation("GroupOwner", fields: [ownerId], references: [id])
  // members relation
  memberships Membership[]
  invites     Invitation[]

  @@map("group")
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  role      String   @default("member") // owner, admin, member
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@map("membership")
}

model GiftList {
  id          String   @id @default(cuid())
  title       String
  description String?
  ownerId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner User  @relation(fields: [ownerId], references: [id])
  items Idea[]
  suggestions Suggestion[]

  @@map("gift_list")
}

model Idea {
  id          String   @id @default(cuid())
  title       String
  url         String?
  notes       String?
  priceCents  Int?
  image       String?
  createdById String
  listId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy User     @relation("UserCreatedIdeas", fields: [createdById], references: [id])
  list      GiftList @relation(fields: [listId], references: [id])

  claims    Claim[]

  @@map("idea")
}

/// A private "I'm taking this" marker on an idea. Hidden from the list owner.
model Claim {
  id        String   @id @default(cuid())
  ideaId    String
  userId    String
  createdAt DateTime @default(now())

  idea Idea @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([ideaId, userId])
  @@map("claim")
}

/// A suggested idea to someone else's list, pending approval by the list owner.
model Suggestion {
  id          String   @id @default(cuid())
  listId      String
  title       String
  url         String?
  notes       String?
  priceCents  Int?
  image       String?
  createdById String
  status      String   @default("pending") // pending | accepted | rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  list      GiftList @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdBy User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("suggestion")
}

/// Invitation link to join a group
model Invitation {
  id           String   @id @default(cuid())
  token        String   @unique
  groupId      String
  createdById  String
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  usedAt       DateTime?
  usedById     String?

  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdBy User  @relation("InvitationCreatedBy", fields: [createdById], references: [id])
  usedBy    User? @relation("InvitationUsedBy", fields: [usedById], references: [id])

  @@map("invitation")
}

/// Web Push subscription per device for a user
model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscription")
}
